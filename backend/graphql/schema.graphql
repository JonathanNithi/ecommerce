scalar Time

enum Role {
  user
  admin
}

enum SortDirection {
  ASC
  DESC
}

enum ProductSortField {
  NAME
  PRICE
}

input ProductSortInput {
  field: ProductSortField!
  direction: SortDirection!
}

type Account {
  id: String!
  first_name: String!
  last_name: String!
  email: String!
  password_hash: String!
  orders: [Order!]!
  role: Role!
}

type Product {
  id: String!
  name: String!
  description: String!
  price: Float!
  category: String!
  imageUrl: String!
  tags: [String!]
  availability: Boolean!
  stock: Int!
}

type Order {
  id: String!
  createdAt: Time!
  totalPrice: Float!
  products: [OrderedProduct!]!
}

type OrderedProduct {
  id: String!
  name: String!
  description: String!
  price: Float!
  quantity: Int!
  imageUrl: String!
}

type LoginResponse {
  account: Account!
  accessToken: String!
  refreshToken: String!
}

type ProductListResponse {
  items: [Product!]!
  totalCount: Int!
}

input PaginationInput {
  skip: Int
  take: Int
}

input AccountInput {
  first_name: String!
  last_name: String!
  email: String!
  password: String!
}

input ProductInput {
  name: String!
  description: String!
  price: Float!
  category: String!
  imageUrl: String!
  tags: [String!]
  stock: Int!
}

input OrderProductInput {
  product_id: String!
  quantity: Int!
}

input OrderInput {
  account_id: String!
  accessToken: String!
  refreshToken: String!
  products: [OrderProductInput!]!
}

input UpdateProductStockInput {
  accessToken: String!
  refreshToken: String!
  productId: String!
  newStock: Int!
  accountId: String!
}

type UpdateProductStockResponse {
  product: Product
}

type Mutation {
  createAccount(account: AccountInput!): Account
  createProduct(product: ProductInput!): Product
  createOrder(order: OrderInput!): Order
  login(email: String!, password: String!): LoginResponse
  setAccountAsAdmin(accessToken: String!, refreshToken: String!, userId: String!): Account
  updateStock(input: UpdateProductStockInput!): UpdateProductStockResponse! 
}

type Query {
  accounts(pagination: PaginationInput, id: String, accessToken: String!, refreshToken: String!): [Account!]!
  products(pagination: PaginationInput, query: String, id: String, category: String, sort: ProductSortInput): ProductListResponse!
  productsById(id: [String!]): [Product!]!
}